#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Grave {
            bindings = <&kp GRAVE>;
            key-positions = <22 21>;
            require-prior-idle-ms = <200>;
        };

        Backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <34 33>;
            require-prior-idle-ms = <200>;
        };

        Semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <32 33>;
            require-prior-idle-ms = <200>;
        };
    };
};

/ {
    behaviors {
        hrml: hrml {
            compatible = "zmk,behavior-hold-tap";
            label = "HRML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 18 19 20 21 30 31 32 33 39 40 41 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 38>;
            tapping-term-ms = <180>;
            flavor = "balanced";
            require-prior-idle-ms = <200>;
            hold-trigger-on-release;
            hold-while-undecided;
            hold-while-undecided-linger;
        };

        hrmr: hrmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HRMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            require-prior-idle-ms = <200>;
            hold-trigger-on-release;
            hold-while-undecided-linger;
            hold-while-undecided;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp C_NEXT        &kp Q               &kp W                 &kp E             &kp R                 &kp T        &kp Y         &kp U                  &kp I              &kp O                  &kp P                           &kp C_VOLUME_UP
&kp C_PLAY_PAUSE  &hrml LEFT_SHIFT A  &hrml LEFT_CONTROL S  &hrml LEFT_ALT D  &hrml LEFT_COMMAND F  &kp G        &kp H         &hrmr RIGHT_COMMAND J  &hrmr RIGHT_ALT K  &hrmr RIGHT_CONTROL L  &hrmr RIGHT_SHIFT SINGLE_QUOTE  &kp C_MUTE
&kp C_PREV        &kp Z               &kp X                 &kp C             &kp V                 &kp B        &kp N         &kp M                  &kp COMMA          &kp DOT                &kp FSLH                        &kp C_VOLUME_DOWN
                                                            &mo 1             &kp SPACE             &lt 2 TAB    &lt 2 ESCAPE  &kp ENTER              &mo 1
            >;
        };

        CHA {
            bindings = <
&trans  &kp EXCL                    &kp STAR                  &kp LEFT_PARENTHESIS         &kp RIGHT_PARENTHESIS             &kp AT       &kp CARET      &kp N7                  &kp N8              &kp N9                  &kp DOLLAR              &trans
&trans  &hrml LEFT_SHIFT LESS_THAN  &hrml LEFT_CONTROL MINUS  &hrml LEFT_ALT LEFT_BRACKET  &hrml LEFT_COMMAND RIGHT_BRACKET  &kp EQUAL    &kp AMPERSAND  &hrmr RIGHT_COMMAND N4  &hrmr RIGHT_ALT N5  &hrmr RIGHT_CONTROL N6  &hrmr RIGHT_SHIFT HASH  &trans
&trans  &kp GREATER_THAN            &kp PLUS                  &kp LEFT_BRACE               &kp RIGHT_BRACE                   &kp UNDER    &kp N0         &kp N1                  &kp N2              &kp N3                  &kp PERCENT             &trans
                                                              &trans                       &trans                            &trans       &trans         &trans                  &trans
            >;
        };

        NAV {
            bindings = <
&trans  &trans     &kp BSPC   &kp UP     &kp DEL    &trans    &bt BT_SEL 0          &bt BT_SEL 1       &bt BT_SEL 2   &bt BT_SEL 3       &bt BT_CLR       &trans
&trans  &trans     &kp LEFT   &kp DOWN   &kp RIGHT  &trans    &kp C_BRIGHTNESS_INC  &kp RIGHT_COMMAND  &kp RIGHT_ALT  &kp RIGHT_CONTROL  &kp RIGHT_SHIFT  &trans
&trans  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &trans    &kp C_BRIGHTNESS_DEC  &trans             &trans         &trans             &trans           &trans
                              &trans     &trans     &trans    &trans                &trans             &trans
            >;
        };

        BL {
            bindings = <
&bootloader  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &bootloader
&kp A        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &kp A
&sys_reset   &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &sys_reset
                             &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        BL {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
